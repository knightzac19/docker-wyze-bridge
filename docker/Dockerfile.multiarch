ARG BUILD
ARG BUILD_DATE
ARG GITHUB_SHA
FROM amd64/python:3.12-slim-bookworm AS base_amd64
FROM arm32v7/python:3.12-slim-bookworm AS base_arm
FROM arm64v8/python:3.12-slim-bookworm AS base_arm64
FROM amd64/golang:1.23 AS go-builder-amd64
FROM arm32v7/golang:1.23 AS go-builder-arm
FROM arm64v8/golang:1.23 AS go-builder-arm64


FROM go-builder-$TARGETARCH AS go-builder
COPY whep_proxy /app
WORKDIR /app
RUN go mod download
RUN go build -o whep_proxy


FROM base_$TARGETARCH AS builder
ARG TARGETARCH
ARG BUILD_DATE
RUN apt-get update \
    && apt-get install -y curl tar gcc \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*
COPY /app/ /build/app/
RUN pip3 install --disable-pip-version-check --prefix=/build/usr/local -r /build/app/requirements.txt
RUN echo "BUILDING IMAGE FOR ${TARGETARCH}" && \
    if [ "${TARGETARCH}" = "arm" ]; \
    then FFMPEG_ARCH=arm32v7; MTX_ARCH=armv7; \
    elif [ "${TARGETARCH}" = "arm64" ]; \
    then FFMPEG_ARCH=aarch64; MTX_ARCH=arm64v8; \
    else FFMPEG_ARCH=x86_64; MTX_ARCH=amd64; \
    fi && \
    cd /build \
    && . app/.env \
    && mkdir -p tokens img \
    && curl -SL https://github.com/homebridge/ffmpeg-for-homebridge/releases/latest/download/ffmpeg-alpine-${FFMPEG_ARCH}.tar.gz \
    | tar xzf - -C . \
    && curl -SL https://github.com/bluenviron/mediamtx/releases/download/v${MTX_TAG}/mediamtx_v${MTX_TAG}_linux_${MTX_ARCH}.tar.gz \
    | tar xzf - -C app \
    && cp app/lib/lib.${TARGETARCH} usr/local/lib/libIOTCAPIs_ALL.so \
    && rm -rf app/*.txt app/lib/  \ 
    && if [ -z "${BUILD_DATE}" ]; then echo BUILD_DATE=$(date) > .build_date; else echo BUILD_DATE=${BUILD_DATE} > .build_date; fi

FROM base_$TARGETARCH
ARG BUILD
ARG GITHUB_SHA
COPY --from=builder /build /
COPY --from=go-builder /app/whep_proxy /usr/local/bin/whep_proxy
RUN chmod +x /usr/local/bin/whep_proxy
ENV PYTHONUNBUFFERED=1 FLASK_APP=frontend BUILD=$BUILD GITHUB_SHA=$GITHUB_SHA
WORKDIR /app
CMD ["flask", "run", "--host=0.0.0.0"]